#SPDX-License-Identifier: MIT-0
---
#
# Task file for claude_sectest

# Claude: Promnpt
#
# write a modules to do the following
# assume it will be run as root
# copy the file: ispconfig-audit.sh to the remote in /usr/local/bin/  as executable.
# Run the secript  /usr/local/bin/ispconfig-autid.sh -d /opt/audit/ispconfig-audit
# transfer the output from the remote at /opt/audit/ispconfig-audit/ispconfig-config.json  to my local machine at "~/{{ ansible host }}-ispconfig-audit-{{ epoch time }}.json"

# .......................................................................
- name: Ensure /usr/local/bin directory exists
  file:
    path: /usr/local/bin
    state: directory
    mode: "0755"
    owner: root
    group: root

- name: Copy ispconfig-audit.sh script to remote host
  copy:
    src: ispconfig-audit.sh
    dest: "{{ audit_script_path }}"
    mode: "0755"
    owner: root
    group: root
    backup: yes
  register: script_copy

- name: Ensure audit directory exists
  file:
    path: "{{ audit_directory }}"
    state: directory
    mode: "0755"
    owner: root
    group: root

- name: Install git (required for audit script)
  package:
    name: git
    state: present

- name: Build audit command with optional retention policy
  set_fact:
    audit_command: >-
      {{ audit_script_path }} -d {{ audit_directory }}
      {%- if audit_retention_commits is defined and audit_retention_commits | int > 0 %}
       --retain {{ audit_retention_commits }}
      {%- endif %}

# .......................................................................
- name: Run ISPConfig security audit script
  command: "{{ audit_command }}"
  register: audit_result
  changed_when: true
  become: yes

- name: Display audit script output
  debug:
    var: audit_result.stdout_lines
  when:
    - audit_result.stdout_lines is defined
    - audit_show_output | bool

# .......................................................................
- name: Check if audit output file exists
  stat:
    path: "{{ audit_directory }}/{{ audit_output_filename }}"
  register: audit_output_file

- name: Fail if audit output file not found
  fail:
    msg: "Audit output file not found at {{ audit_directory }}/{{ audit_output_filename }}"
  when: not audit_output_file.stat.exists

- name: Generate timestamp for local filename
  set_fact:
    audit_timestamp: "{{ ansible_date_time.epoch }}"

- name: Create local audit results directory
  local_action:
    module: file
    path: "{{ audit_local_directory }}"
    state: directory
    mode: "0755"
  when: audit_local_directory != "~/audit"
  run_once: true

- name: Fetch audit results to local machine
  fetch:
    src: "{{ audit_directory }}/{{ audit_output_filename }}"
    dest: "{{ audit_local_directory }}/{{ inventory_hostname }}-ispconfig-audit-{{ audit_timestamp }}.json"
    flat: yes
  when: audit_output_file.stat.exists

- name: Display local file location
  debug:
    msg: "Audit results saved to: {{ audit_local_directory }}/{{ inventory_hostname }}-ispconfig-audit-{{ audit_timestamp }}.json"
#

# - name: Show git history summary when retention is enabled
#   command: "git -C {{ audit_directory }} log --oneline -10"
#   register: git_history
#   ignore_errors: true
#   when: audit_retention_commits is defined

# - name: Display git history
#   debug:
#     msg: |
#       Recent audit history:
#       {{ git_history.stdout }}
#   when:
#     - audit_retention_commits is defined
#     - git_history is succeeded
#     - audit_show_output | bool
