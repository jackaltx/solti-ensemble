<?xml version="1.0" encoding="UTF-8"?>

<!-- Wazuh Agent configuration - Ansible managed SMELL add date/time -->

<ossec_config>
  <!-- Global configuration -->
  <global>
    <email_notification>no</email_notification>
  </global>

  <!-- Client configuration -->
  <client>
    <server>
      <address>{{ wazuh_server_address }}</address>
      <port>{{ wazuh_server_port }}</port>
      <protocol>{{ wazuh_server_protocol }}</protocol>
    </server>
    <crypto_method>aes</crypto_method>
    <notify_time>10</notify_time>
    <time-reconnect>60</time-reconnect>
    <auto_restart>yes</auto_restart>
  </client>

  <client_buffer>
    <disabled>no</disabled>
    <queue_size>{{ wazuh_agent_buffer_queue_size }}</queue_size>
    <events_per_second>{{ wazuh_agent_buffer_events_per_second }}</events_per_second>
  </client_buffer>

  <!-- 
          Policy Monitoring Section
   -->

  <!-- Rootcheck module -->
  {% if wazuh_security_modules.rootcheck.enabled %}
  <rootcheck>
    <disabled>no</disabled>
    <check_unixaudit>yes</check_unixaudit>
    <check_files>yes</check_files>
    <check_trojans>yes</check_trojans>
    <check_dev>yes</check_dev>
    <check_sys>yes</check_sys>
    <check_pids>yes</check_pids>
    <check_ports>yes</check_ports>
    <check_if>yes</check_if>
    <frequency>{{ wazuh_security_modules.rootcheck.frequency }}</frequency>

    <!-- This section is from from deb12 -->

    <rootkit_files>etc/shared/rootkit_files.txt</rootkit_files>
    <rootkit_trojans>etc/shared/rootkit_trojans.txt</rootkit_trojans>
    <skip_nfs>yes</skip_nfs>
    <ignore>/var/lib/containerd</ignore>
    <ignore>/var/lib/docker/overlay2</ignore>

    <!-- End added section -->


  </rootcheck>
  {% endif %}

  <!-- 
        File Integrity Monitoring (FIM) Section
        SMELL  Claude has version issues???
   -->

  <!-- Syscheck module -->
  {% if wazuh_security_modules.syscheck.enabled %}
  <syscheck>
    <disabled>no</disabled>
    <frequency>{{ wazuh_security_modules.syscheck.frequency }}</frequency>
    <scan_on_start>{{ 'yes' if wazuh_security_modules.syscheck.scan_on_start else 'no' }}</scan_on_start>
    <alert_new_files>yes</alert_new_files>
    <process_priority>{{ wazuh_security_modules.syscheck.process_priority }}</process_priority>
    
    <!-- Monitored directories -->
    {% for dir in wazuh_security_modules.syscheck.directories %}
    <directories check_all="{{ 'yes' if dir.check_all else 'no' }}">{{ dir.path }}</directories>
    {% endfor %}

    <!-- Ignored paths -->
    {% for path in wazuh_security_modules.syscheck.ignore_paths %}
    <ignore>{{ path }}</ignore>
    {% endfor %}

    <!-- This section is from from deb12 -->

    <!-- File types to ignore -->
    <ignore type="sregex">.log$|.swp$</ignore>

    <!-- Check the file, but never compute the diff -->
    <nodiff>/etc/ssl/private.key</nodiff>

    <skip_nfs>yes</skip_nfs>
    <skip_dev>yes</skip_dev>
    <skip_proc>yes</skip_proc>
    <skip_sys>yes</skip_sys>

    <!-- Nice value for Syscheck process -->
    <process_priority>10</process_priority>

    <!-- Maximum output throughput -->
    <max_eps>50</max_eps>

    <!-- Database synchronization settings -->
    <synchronization>
      <enabled>yes</enabled>
      <interval>5m</interval>
      <max_eps>10</max_eps>
    </synchronization>

    <!-- End added section -->

  </syscheck>
  {% endif %}





  <!-- Security Configuration Assessment -->
  {% if wazuh_security_modules.sca.enabled %}
  <sca>
    <enabled>yes</enabled>
    <scan_on_start>yes</scan_on_start>
    <interval>{{ wazuh_security_modules.sca.interval }}</interval>
    <skip_nfs>yes</skip_nfs>
  </sca>
  {% endif %}



  <!-- System inventory -->
  {% if wazuh_security_modules.syscollector.enabled %}
  <wodle name="syscollector">
    <disabled>no</disabled>
    <interval>{{ wazuh_security_modules.syscollector.interval }}</interval>
    <scan_on_start>yes</scan_on_start>
    <hardware>yes</hardware>
    <os>yes</os>
    <network>yes</network>
    <packages>yes</packages>
    <ports all="no">yes</ports>
    <processes>yes</processes>
  </wodle>
  {% endif %}

  <!-- cis_cat integration -->
  {% if wazuh_security_modules.cis_cat.enabled %}
  <wodle name="cis_cat">
    <disabled>no</disabled>
    <timeout>{{ wazuh_security_modules.cis_cat.timeout }}</timeout>
    <interval>{{ wazuh_security_modules.cis_cat.interval }}</interval>
    <scan-on-start>yes</scan-on-start>
    <java_path>wodles/java</java_path>
    <ciscat_path>wodles/ciscat</ciscat_path>
  </wodle>
  {% endif %}

  <!-- Osquery integration -->
  {% if wazuh_security_modules.osquery.enabled %}
  <wodle name="osquery">
    <disabled>no</disabled>
    <run_daemon>yes</run_daemon>
    <log_path>/var/log/osquery/osqueryd.results.log</log_path>
    <config_path>/etc/osquery/osquery.conf</config_path>
    <add_labels>yes</add_labels>
  </wodle>
  {% endif %}




  <!-- Active response -->
  {% if wazuh_security_modules.active_response.enabled %}
  <active_response>
    <disabled>no</disabled>
    <ca_store>etc/wpk_root.pem</ca_store>
    <ca_verification>yes</ca_verification>
  </active_response>
  
  {% if wazuh_security_modules.active_response.block_malicious %}
  <command>
    <name>firewall-drop</name>
    <executable>firewall-drop.sh</executable>
    <expect>srcip</expect>
    <timeout_allowed>yes</timeout_allowed>
  </command>
  
  <active_response>
    <command>firewall-drop</command>
    <location>local</location>
    <level>7</level>
    <timeout>600</timeout>
  </active_response>
  {% endif %}
  {% endif %}


  <!-- 
        Log collection configuration Section 
  -->


  <!-- System logs -->
  {% if merged_log_monitoring.system.journald %}
  <localfile>
    <log_format>journald</log_format>
    {% for filter in merged_log_monitoring.journald_filters %}
    {% if filter.enabled %}
    <location>{{ filter.query }}</location>
    {% endif %}
    {% endfor %}
    {% if not merged_log_monitoring.journald_filters %}
    <location>all</location>
    {% endif %}
  </localfile>
  {% endif %}

  {% if merged_log_monitoring.system.audit %}
  <localfile>
    <log_format>audit</log_format>
    <location>/var/log/audit/audit.log</location>
  </localfile>
  {% endif %}

  {% if merged_log_monitoring.system.dpkg and ansible_os_family == 'Debian' %}
  <localfile>
    <log_format>syslog</log_format>
    <location>{{ log_locations.dpkg }}</location>
  </localfile>
  {% endif %}

  {% if merged_log_monitoring.system.rpm and ansible_os_family == 'RedHat' %}
  <localfile>
    <log_format>syslog</log_format>
    <location>{{ log_locations.rpm }}</location>
  </localfile>
  {% endif %}



  <!-- Web server logs -->



  {% if merged_log_monitoring.web.apache_access and discovered_services.web.apache %}
  <localfile>
    <log_format>apache</log_format>
    <location>{{ log_locations.apache_access }}</location>
  </localfile>
  {% endif %}

  {% if merged_log_monitoring.web.apache_error and discovered_services.web.apache %}
  <localfile>
    <log_format>apache_error</log_format>
    <location>{{ log_locations.apache_error }}</location>
  </localfile>
  {% endif %}

  {% if merged_log_monitoring.web.nginx_access and discovered_services.web.nginx %}
  <localfile>
    <log_format>nginx</log_format>
    <location>{{ log_locations.nginx_access }}</location>
  </localfile>
  {% endif %}

  {% if merged_log_monitoring.web.nginx_error and discovered_services.web.nginx %}
  <localfile>
    <log_format>syslog</log_format>
    <location>{{ log_locations.nginx_error }}</location>
  </localfile>
  {% endif %}



  <!-- Database logs -->


  {% if merged_log_monitoring.database.mysql and discovered_services.database.mysql %}
  <localfile>
    <log_format>syslog</log_format>
    <location>{{ log_locations.mysql }}</location>
  </localfile>
  {% endif %}

  {% if merged_log_monitoring.database.postgresql and discovered_services.database.postgresql %}
  <localfile>
    <log_format>postgresql</log_format>
    <location>{{ log_locations.postgresql }}</location>
  </localfile>
  {% endif %}


  <!-- Command monitoring -->


  {% if merged_log_monitoring.commands.disk_space %}
  <localfile>
    <log_format>command</log_format>
    <command>df -h</command>
    <frequency>360</frequency>
  </localfile>
  {% endif %}

  {% if merged_log_monitoring.commands.network_ports %}
  <localfile>
    <log_format>full_command</log_format>
    <command>netstat -tulpn | grep LISTEN | sort</command>
    <frequency>360</frequency>
  </localfile>
  {% endif %}

  {% if merged_log_monitoring.commands.last_logins %}
  <localfile>
    <log_format>full_command</log_format>
    <command>last -n 20</command>
    <frequency>360</frequency>
  </localfile>
  {% endif %}

  {% if merged_log_monitoring.commands.open_files %}
  <localfile>
    <log_format>full_command</log_format>
    <command>lsof -P -n +L1</command>
    <frequency>720</frequency>
  </localfile>
  {% endif %}

  {% if merged_log_monitoring.commands.process_list %}
  <localfile>
    <log_format>full_command</log_format>
    <command>ps -eo user,pid,ppid,cmd --sort=-pcpu | head -n 15</command>
    <frequency>360</frequency>
  </localfile>
  {% endif %}


  <!-- Custom log files -->


  {% for log in merged_log_monitoring.custom %}
  {% if log.enabled %}
  <localfile>
    <log_format>{{ log.format }}</log_format>
    <location>{{ log.path }}</location>
    {% if log.ignore_type_pcre2 is defined and log.ignore_type_pcre2 %}
    <ignore type="PCRE2">{{ log.ignore_type_pcre2 }}</ignore>
    {% endif %}
  </localfile>
  {% endif %}
  {% endfor %}

  <!-- Basic system logs -->

  <localfile>
    <log_format>syslog</log_format>
    <location>{{ log_locations.auth }}</location>
  </localfile>

  <localfile>
    <log_format>syslog</log_format>
    <location>{{ log_locations.syslog }}</location>
  </localfile>
</ossec_config>