---
# Configuration tasks for gitea

# Ensure the Gitea service file is properly configured
- name: Configure Gitea service
  ansible.builtin.template:
    src: gitea.service.j2
    dest: "{{ gitea_service_path }}"
    owner: root
    group: root
    mode: "0644"
  become: true
  notify:
    - Reload systemd
    - Restart gitea

# Configure app.ini
- name: Configure Gitea app.ini
  ansible.builtin.template:
    src: app.ini.j2
    dest: "{{ gitea_app_ini_path }}"
    owner: "{{ gitea_user }}"
    group: "{{ gitea_group }}"
    mode: "0640"
  become: true
  notify:
    - Restart gitea

# Ensure service is enabled and started
- name: Enable and start Gitea service
  ansible.builtin.systemd_service:
    name: gitea
    state: started
    enabled: true
    daemon_reload: true
  become: true

# Wait for Gitea to be available
- name: Wait for Gitea to start
  ansible.builtin.uri:
    url: "{{ gitea_root_url }}api/v1/version"
    status_code: 200, 401, 404, 403 # Added 403 as Gitea returns this for auth requirements
    follow_redirects: yes
    timeout: 60
  register: gitea_api_check
  retries: 10
  delay: 5
  until: gitea_api_check.status in [200, 401, 404, 403] # Added 403 as a valid response
  changed_when: false
  ignore_errors: true

# First ensure Gitea web service is actually running before admin commands
- name: Check if Gitea is initialized
  ansible.builtin.stat:
    path: "{{ gitea_data_path }}/gitea.db"
  register: gitea_db_file
  when: gitea_db_type == 'sqlite3'

# Configure initial admin user if this is a fresh installation
- name: Check if Gitea admin user exists
  ansible.builtin.command: >
    gitea admin user list --config {{ gitea_app_ini_path }}
  register: admin_list
  become: true
  become_user: "{{ gitea_user }}"
  changed_when: false
  ignore_errors: true
  when: gitea_db_type != 'sqlite3' or gitea_db_file.stat.exists | default(false)

- name: Create Gitea admin user if not found
  ansible.builtin.command: >
    gitea admin user create 
    --config {{ gitea_app_ini_path }}
    --username {{ gitea_admin_user }}
    --password '{{ gitea_admin_password }}'
    --email {{ gitea_admin_email }}
    --admin
  become: true
  become_user: "{{ gitea_user }}"
  when:
    - gitea_db_type != 'sqlite3' or gitea_db_file.stat.exists | default(false)
    - admin_list.stdout is not defined or gitea_admin_user not in admin_list.stdout
  no_log: true
